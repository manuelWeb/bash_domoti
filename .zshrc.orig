# Created by newuser for 5.1.1
ZSH_THEME="agnoster"
# com coller ctr+v
stty lnext ^q stop undef start undef

# git pager
alias gitlog="git log --color=always | less -R"

### CMD perso
PS1=$'%{\e]0;%d\a%}\n%F{green}%n@%m %F{yellow}%d%f\n%# '
# autocomplete insensible à la case :
CASE_SENSITIVE="true"

alias info='echo "=== Remote ===" && git remote -v && echo "" && echo "=== Branch ===" && git branch -v && echo "" && echo "=== Latest commits ===" && git log --pretty="%cr (%cn) %s" -n 15 --date=relative' 
alias taille='du -hxBM --max-depth=1 . | sort -n'

# add empty month folder
mkdirm(){
  # todo passer variable en prompt month: "prompt" + year: "prompt"
  month=$1
  year=$2
  mkdir $1$2 && cd $1$2 && touch desktop.ini && echo "[.ShellClassInfo]" >> desktop.ini && echo "IconResource=C:\Users\mdevries\Pictures\domoti\favicon\perso\months\\$1.y$2.ico,0" >> desktop.ini
  attrib +s +h desktop.ini
  cd ../
  attrib +r $1$2
  # + ouvrir R:/pdf
}
mkdirico(){
  # todo passer variable en prompt month: "prompt" + year: "prompt"
  icon=$1
  mkdir $1 && cd $1 && touch desktop.ini && echo "[.ShellClassInfo]" >> desktop.ini && echo "IconResource=C:\Users\mdevries\Pictures\domoti\favicon\perso\\$1.ico,0" >> desktop.ini
  attrib +s +h desktop.ini
  cd ../
  attrib +r $1
  # + ouvrir R:/pdf
}
# permet de recharger .bashrc dans le cash console
rbash(){
  source ~/.bashrc
}
# ouverture planning-Manuel-2016
plan(){
  # pwd
  # pwd [options]

  var=$(pwd)
  echo "return to pwd $var"
  cd I:/PLANS\ WEB/PLAN@2016/ && cygstart planning-Manuel-2016.xlsx
  # cd I:/PLANS\ WEB/PLAN@2016/ && open planning-Manuel-2016.xlsx
  cd $var
}
# ouverture planning-Manuel-2016
planw(){
  # pwd
  # pwd [options]

  var=$(pwd)
  echo "return to pwd $var"
  cd K:/WEB/ && cygstart Plan_WEB_2016.xls
  cd $var
}

# ouverture codekdo-2016
codekdo(){
  # pwd
  # pwd [options]
  var=$(pwd)
  echo "return to pwd $var"
  cd I:/Vérifications\ campagnes/ && cygstart CODE-CAMPAGNE-TTES-ENSEIGNES.xlsx
  cd $var
}
# taille
folderSize(){
  du -sh ./
}

# diff
diffme(){
  echo -n "REP1 : "
  read -r REP1
  echo -n "REP2 : "
  read -r REP2
  echo -n "1: " && ls $REP1
  echo -n "2: " && ls $REP2

  if [ $(diff -r $REP1 $REP2 | grep -c .) -gt 0 ]; then
    output="$(diff -r $REP1 $REP2)"
    echo $output > diff.md
    echo "!IMPORTANT > Les répertoires sont différents lire le rapport diff.md"
  else
    echo "Les répertoires sont identiques"
  fi
  # cygstart diff.md
  if [ -f diff.md ] ; then echo "open diff.md> " && cygstart diff.md ; else echo "coool!" ; fi
}

cpr(){
  input=$1
  output=$2
  echo "cp -r de $input vers $output"
  cp -r $input $output && cd $output && cat desktop.ini
  desktopold=''
  desktopnew=''
  echo "modif desktopold : "
  read desktopold
  echo "modif desktopnew : "
  read desktopnew
  echo "$desktopold $desktopnew"
  sed -i -r -e "s/$desktopold/$desktopnew/" desktop.ini && attrib desktop.ini +s
  cd ../ && attrib +s $output
  echo "ready to work in $output"
}
iconrest(){
  for i in */ */*;do attrib +S "${i%/}";done
}
# rimraf dest/ render/ dev/ evtProd/ preview/ zipped/
# "$@" == arg fct
# for i in "$@"; do
rp() {
  for i in *; do
    if [ -d $i ]; then
      echo "folder: " $i
      if [[ $i == 'dest' ]]; then
	echo "deleted: " $i
	rimraf $i
      fi
      if [[ $i == 'render' ]]; then
  echo "deleted: " $i
  rimraf $i
      fi
      if [[ $i == 'build' ]]; then
	echo "deleted: " $i
	rimraf $i
      fi
      if [[ $i == 'dev' ]]; then
	echo "deleted: " $i
	rimraf $i
      fi
      if [[ $i == 'evtProd' ]]; then
	echo "deleted: " $i
	rimraf $i
      fi
      if [[ $i == 'preview' ]]; then
	echo "deleted: " $i
	rimraf $i
      fi
      if [[ $i == 'zipped' ]]; then
	echo "deleted: " $i
	rimraf $i
      fi
    else
      echo "file: " $i
    fi
  done
}

rmdeskini(){
  for i in ./ */ */* */*/*; do attrib $1s $1h $i/desktop.ini;done
}
# rmfile(){
#   rm -rf *.$1 *.$2 *.$3 *.$4
# }
rmhtml(){
  for i in "$@"; do
    if [ -d "$i" ]; then
      echo "folder: " $i/*
      rm $i/*.html
    else
      echo "file: " $i
    fi
  done
}

lsfile(){
  for i in "$@"; do
    if [ -d "$i" ]; then
      echo "folder: " $i
    else
      echo "file: " $i
    fi
  done
  echo "fileSize: " $#
}

fileexist(){
  DIRECTORY=$1
  if [ -d "$DIRECTORY" ]; then
    echo $DIRECTORY "Exists!"
  else
    echo $DIRECTORY "Does not exist!"
  fi
}

d(){
  # date +"%D"
  date +"%d %m %Y"
}
t(){
  # date +"%T"
  while [ 1 ] ; do echo -en "$(date +%T)\r" ; sleep 1; done

}
dt(){
  date +"%D"
  date +"%T"
}

# function with arguments
fun(){
  echo "ton argument : " $1 $2
}

go(){
  cd /cygdrive/c/Users/mdevries/Pictures/$1
  count=1
  for i in *; do
    # if test -d $i; then echo 'dossier= '$i;else echo 'files= '$i;fi
    if [ -d "$i" ]; then
      echo $count-$i
      tableai[$count]=$i
      (( count=$count+1 ))
    fi
  done
  ((count=$count-1))
  echo -e "\033[33;40mfolder.size" $count"\033[0m"
  dossier=''
  echo -n "Where do you want to go : "
  read dossier
  echo -e "you chose: " "\e[1;31;42m"${tableai[$dossier]}"\e[0m"
  echo -en "\033[31;1;4;5;7m"${tableai[$dossier]}"/\033[0m " && cd ${tableai[$dossier]} && ls && cygstart ./
}

i(){
  cd /cygdrive/c/Users/mdevries/Pictures/$1
  count=1
  for i in *; do
    # if test -d $i; then echo 'dossier= '$i;else echo 'files= '$i;fi
    if [ -d "$i" ]; then
      echo $count-$i
      tableai[$count]=$i
      (( count=$count+1 ))
    fi
  done
  ((count=$count-1))
  dossier=''
  echo -n "Where do you want to go : "
  read dossier
  echo -e -n "you're in" "\033[31;1;4;5;7m"${tableai[$dossier]}"/\033[0m""> "
  cd ${tableai[dossier]} && ls --color -I desktop.ini
}

u(){
  cd ~/../c/users/$1 && echo "=== Users contents ===" && ls -a && start .;
}
# call && open folder

h(){
  cd ~/../c; echo "=== c:/ contents ===" && ls -a;
}

prog(){
  cd ~/../c/Program\ Files/; echo "=== Program Files contents ===" && ls -a;
}

progx86(){
  cd ~/../c/"Program Files (x86)"/; echo "=== Program Files (x86) contents ===" && ls -a;
}

# modif bash
bashrcmodif(){
  returnH=$(pwd)
  cd ~ && st .bashrc
  echo "return to pwd $returnH."
  cd $returnH
}

# open file with fw
fwo() {
  "C:\Program Files (x86)\Adobe\Adobe Fireworks CS5.1\Fireworks.exe" $1 &
}

# read file line by line
readthis(){
  while read line; do echo ${line}; done < $1
  }

  # Py path
  export PATH="$PATH:/c/Python27"

  # change Ruby path to the cygwin
  # echo "Aliasing all ruby binaries."
  if [[ -n "$(which ruby 2>/dev/null)" ]]; then
    RUBY_BIN=$(cygpath -u $(ruby -e 'puts RbConfig::CONFIG["bindir"]'))
    for f in $(find ${RUBY_BIN: : -1} -regex ".*bat$"| xargs -n1 basename); do
      alias ${f%.bat}=${f}
    done
  fi

  # alias
  alias vim='gvim'
  alias open='cygstart'